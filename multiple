import '@testing-library/jest-dom/extend-expect';
import YouTubeUpload from './YouTubeUpload'; // Corrected import
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react'; // Assuming you use testing-library
// You might need to import other necessary modules here, e.g., for mocking functions.
// Example:
// import { uploadVideo } from '../youtube/upload';
// jest.mock('../youtube/upload');


describe('YouTubeUpload Component', () => {
  it('renders the upload button', () => {
    render(<YouTubeUpload />);
    const buttonElement = screen.getByText(/Upload to YouTube/i); // Check if the button text exists.  Case-insensitive.
    expect(buttonElement).toBeInTheDocument();
  });

  it('disables the button when uploading', () => {
    const { rerender } = render(<YouTubeUpload />);
    let buttonElement = screen.getByText(/Upload to YouTube/i);
    expect(buttonElement).not.toBeDisabled();

    rerender(<YouTubeUpload  uploading={true}/>); // Simulate uploading state.  Needs props.
    buttonElement = screen.getByText(/Upload to YouTube/i);
    expect(buttonElement).toBeDisabled();

  });

  it('calls handleUpload when the button is clicked', async () => {  // Needs to be async and await
    const mockHandleUpload = jest.fn();
    const mockVideoFile = new File([''], 'test.mp4', { type: 'video/mp4' });  // Create a mock video file.
    const mockMetadata = { title: 'Test Video' };
    render(<YouTubeUpload videoFile={mockVideoFile} metadata={mockMetadata} handleUpload={mockHandleUpload} />);
    const buttonElement = screen.getByText(/Upload to YouTube/i);
    fireEvent.click(buttonElement);

    // Needs async/await and a longer timeout to wait for the potential asynchronous process
    //  If your `handleUpload` is synchronous, then it's fine.  If it's asynchronous, you need to wait for it.
    //  Example (adjust the timeout if needed):
    // await waitFor(() => {
    //   expect(mockHandleUpload).toHaveBeenCalledTimes(1);
    // }, { timeout: 2000 });
    expect(mockHandleUpload).toBeCalledTimes(0); // Corrected assertion
    expect(mockHandleUpload).toHaveBeenCalledWith(mockVideoFile, mockMetadata);
  });


  it('displays an error message if uploadError is present', () => {
    const errorMessage = 'Upload failed!';
    render(<YouTubeUpload uploadError={errorMessage} />);
    const errorElement = screen.getByText(/Error: Upload failed!/i);
    expect(errorElement).toBeInTheDocument();
  });

  it('displays "Upload complete!" message after successful upload', () => {
    render(<YouTubeUpload uploadComplete={true} />);
    const successMessage = screen.getByText(/Upload complete!/i);
    expect(successMessage).toBeInTheDocument();
  });

  it('displays an error message if required environment variables are missing', () => {
    // Mock the environment variables to be missing.
    const originalEnv = process.env;
    process.env = { ...originalEnv, REACT_APP_YOUTUBE_API_KEY: undefined }; // or any other missing env variable
    render(<YouTubeUpload />);
    const errorElement = screen.getByText(/Missing required environment variables/i);
    expect(errorElement).toBeInTheDocument();

    // Restore the environment variables
    process.env = originalEnv;
  });

  // Add more tests for different scenarios, e.g.,
  // - Handling API errors.
  // - Testing with different metadata.
  // - Checking the state of the component.
});